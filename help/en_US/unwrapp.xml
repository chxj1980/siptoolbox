<?xml version="1.0" encoding="ISO-8859-1"?><refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="unwrapp"><info><pubdate>February 2004</pubdate></info><refnamediv><refname>unwrapp</refname><refpurpose>Unwraps phased images by path following</refpurpose></refnamediv>
   
   
   
   
   
   
   
   
   
   
   
   <refsynopsisdiv><title>Calling Sequence</title><synopsis>[unwrapped_phase,jumps] = unwrapp(image,merit_function, ...
[line_start,column_start,threshold])</synopsis></refsynopsisdiv>
   
   <refsection><title>Parameters</title>
   
      <variablelist>
      
         <varlistentry>
      
            <term>image</term>
      
            <listitem>
       The gray-level image containing the wrapped phase.
      </listitem>
      
         </varlistentry>
      
         <varlistentry>
      
            <term>merit_function</term>
      
            <listitem>
        The quality of each pixel is estimated: the result is stored in a "merit function" (mf).
 Some merit functions can be laplacien, variance... 
A good quality pixel has a low merit function. 
      </listitem>
      
         </varlistentry>
      
         <varlistentry>
      
            <term>line_start</term> and
      <term>column_start</term>
      
            <listitem>
The starting point to begin the path.
The function will automatically search for the best point in a 15x15
neighbourhood.
<para>
If these parameters are not specified, the function will 
search the best point (=the point with the lowest merit function) in a 
sqarre around the center of the image.
</para>
      
            </listitem>
      
         </varlistentry>
      
         <varlistentry>
      
            <term>threshold</term>
      
            <listitem>
If the difference between 2 pixels is higher than the threshold,
then there's a phase jump.
<para>
Default = 0.5
</para>
      
            </listitem>
      
         </varlistentry>

   
      </variablelist>
   
   </refsection>
   
   <refsection><title>Description</title>
   
      <para>
 For an explanation on phased images, have a look at the  help of the function unwrapl. </para>
   
      <para>
 This function uses an algorithm of "path following" to  unwrapp the phase: The idea is to unwrapp non ambiguous  pixels first. 
Here are some details:  
</para>

      <para>
1) the quality of each pixel is estimated by a "merit  function". 
Most often, the "merit function" will be variance (function "imvariance"), 
but you could try others  functions like laplacien. 
A good quality pixel has a low  merit function.  
</para>

      <para>
2) We begin from a point of good quality. 
It is called  "integrator point".  
</para>

      <para>
3) we rely it to its best quality neighbour, which becomes  the new "integrator point".  
</para>

      <para>
4) If the difference between phases of the 2 points is  higher 
(or lower) than a threshold (=0.5 by default), 
then we consider there's a phase jump.  
</para>

      <para>
5) we continue until all points are treated. </para>
   
      <para>
 How to ignore some points ? You can decide that some  points are so unsure that you prefer to simply ignore  them. This can be done by affecting them a merit function  &gt;= 3000. </para>
   
      <para>
 Note about the "jumps" matrix: it is a matrix containing  only the number of 
jumps needed to re-establish phase continuity: unwrapped_phase=image+jumps; </para>
   
   </refsection>
   
   <refsection><title>Examples</title><programlisting role="example"><![CDATA[
   stacksize(4e7);

   pw=imread(SIPDIR+'images/photonics/pyramide_wrapped.jpg'); //phase wrapped

   mf=imvariance(pw);//calculate a "merit function"
   //you could try also: mf=imconv(a,mkfilter('laplace1'));

   [puw,jumps]=unwrapp(pw,mf);

   xset("window",1);clf;xselect();imshow(normal(puw,1,0));
   xtitle("unwrapped phase");
   xset("window",2);clf;plot3d1(1:8:size(puw,'r'),1:8:size(puw,'c'),puw(1:8:$,1:8:$))
   ]]></programlisting></refsection>


   <refsection><title>References</title>

      <para>
"techniques automatiques de raccordement de phase"
</para>

      <para>
David VENET, 
Memoire de l'universite de Lausanne.
</para>

   </refsection>


   
   <refsection><title>Authors</title><simplelist type="vert">
      
      <member> Jocelyn DRUEL &lt;jocelyn.druel1@libertysurf.fr&gt; 

This function is now coded in C and interfaced with Scilab.
Jean Denaveaut helped greatly for this.


      </member>
   
   </simplelist></refsection>


   <refsection><title>Availability</title>
The latest version of the Scilab Image Processing toolbox can be found at
<para>
         http://siptoolbox.sourceforge.net
      </para>

   </refsection>

   
   <refsection><title>See Also</title><simplelist type="inline">
      
      <member> 
         <link linkend="unwrapl">unwrapl</link> 
      </member>
      
      <member> 
         <link linkend="imvariance">imvariance</link> 
      </member>
      
      <member> 
         <link linkend="imphase">imphase</link> 
      </member>
   
   </simplelist></refsection>

</refentry>