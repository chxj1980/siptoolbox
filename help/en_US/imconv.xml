<?xml version="1.0" encoding="ISO-8859-1"?><refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="imconv"><info><pubdate>February 2004</pubdate></info><refnamediv><refname>imconv</refname><refpurpose>2D convolution</refpurpose></refnamediv>
   
   
   
   
   
   
   
   
   
   
   
   <refsynopsisdiv><title>Calling Sequence</title><synopsis>Outm = imconv(Img, mask [, form])</synopsis></refsynopsisdiv>
   
   <refsection><title>Parameters</title>
   
      <variablelist>
      
         <varlistentry>
      
            <term>Img</term>
      
            <listitem>
       M x N Grayscale (intensity) image in any range.
      </listitem>
      
         </varlistentry>
      
         <varlistentry>
      
            <term>mask</term>
      
            <listitem>
       n x n matrix, n odd. This is the spatial convolution kernel.
      </listitem>
      
         </varlistentry>
      
         <varlistentry>
      
            <term>form</term>
      
            <listitem>
 determines the size of <literal>Outm</literal>. It assumes be one of the following values 'same' <literal>Outm</literal> has the same size as the original 'full' <literal>Outm</literal> contains the full convolution, (M+n-1) 'valid'
      </listitem>
      
         </varlistentry>
   
      </variablelist>
   
   </refsection>
   
   <refsection><title>Parameters</title>
   
      <variablelist>
      
         <varlistentry>
      
            <term>Outm</term>
      
            <listitem>
       The convolved matrix (grayscale image).
      </listitem>
      
         </varlistentry>
   
      </variablelist>
   
   </refsection>
   
   <refsection><title>Description</title>
   
      <para>
 Function <literal>imconv</literal> performs 2D spatial convolution of a grayscale image and a mask. </para>
   
      <variablelist>
   
         <varlistentry><term>edge(Img)</term><listitem>
 Detects edges in <literal>Img</literal>, using the sobel gradient estimator, 0.5 threshold level and in both horizontal and vertical directions.
   </listitem></varlistentry>
   
      </variablelist>
   
      <para>
 The other parameters are optional and non-positional. That is, they may be passed to the function by their name. The following example illustrates this. </para>
   
   </refsection>
   
   <refsection><title>Examples</title><programlisting role="example"><![CDATA[
       initial_dir = PWD;
       chdir (SIPDIR + 'images');
       // Detect horizontal lines
       h = [ -1    -1 -1
         2     2  2
        -1    -1 -1]
       img = imread('gra.jpg');
       res = imconv(img,h);
       clf
       imshow(res,[]);
       // Detect diagonal lines
       d = [ -1    -1  2
        -1     2 -1
         2    -1 -1]
       res = imconv(img,d);
       clf
       imshow(res,[]);
       chdir(initial_dir);
   ]]></programlisting></refsection>
   
   <refsection><title>Authors</title><simplelist type="vert">
      
      <member> Ricardo Fabbri &lt;ricardofabbri (AT) users DOT sf DOT net&gt;, with help from </member>
      
      <member> Scilab Group &lt;Scilab@inria.fr&gt; </member>
   
   </simplelist></refsection>


   <refsection><title>Availability</title>
The latest version of the Scilab Image Processing toolbox can be found at
<para>
         http://siptoolbox.sourceforge.net
      </para>

   </refsection>

   
   <refsection><title>See Also</title><simplelist type="inline">
      
      <member> 
         <link linkend="mkfilter">mkfilter</link> 
      </member>
      
      <member> 
         <link linkend="edge">edge</link> 
      </member>
   
   </simplelist></refsection>

</refentry>
